{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Dnl_nuebn9OHoxAPK24fmV-JxBULix3D","timestamp":1730180025963},{"file_id":"1l_GPJjnpKNgfxCGYwBYdhk5eQjOdijks","timestamp":1730172265758}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"ZLVI_WIcuT56"}},{"cell_type":"code","source":[],"metadata":{"id":"3AfG_Tal0P2S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 1. HTTP-запросы, ответы и погода\n","\n","Напишите HTTP-запрос для получения информации о погоде в введенном городе из API. Можно использовать API: https://open-meteo.com/. Используйте метод GET.\n","\n","\n","Ввод\n","```\n","56.50, 60.35\n","```\n","\n","Вывод\n","```\n","Сегодня (1.11) погода 20 ◦С, нет осадков, туман\n","```\n","\n","\n","\n"],"metadata":{"id":"FtjnLNIKzfMZ"}},{"cell_type":"code","source":["import requests\n","from datetime import datetime\n","city = input(\"\")\n","url = f\"https://api.gismeteo.net/v2/weather/current/?city={city}\"\n","headers = {\n","    'X-Gismeteo-Token': 'YOUR_API_KEY'\n","    }\n","response = requests.get(url, headers=headers)\n","if response.status_code == 200:\n","    data = response.json()\n","    temp = data['response']['temperature']['air']['C']\n","    precip = data['response']['precipitation']['type']\n","    phenomenon = data['response']['phenomenon']['type']\n","    precip_text = \"без осадков\" if precip == \"none\" else precip\n","    phenomenon_text = \"ясно\" if phenomenon == \"clear\" else phenomenon\n","    date = datetime.now().strftime(\"%d.%m\")\n","    print(f\"Сегодня ({date}) в {city} {temp} градусов тепла, {precip_text}, {phenomenon_text}.\")\n","else:\n","    print(\"Не удалось получить данные о погоде.\")\n"],"metadata":{"id":"5Mbs40_buVRV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1730180668652,"user_tz":-300,"elapsed":8052,"user":{"displayName":"Самоуел Емил","userId":"05889526955764185974"}},"outputId":"d46f201d-bf90-49c2-9830-99f6a5e2ae43"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["56.50, 60.35\n","Не удалось получить данные о погоде.\n"]}]},{"cell_type":"markdown","source":["## Задание 2. HTTP-запросы, ответы и покемоны\n","\n","\n","Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:\n","\n","1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов\n","\n","2. Извлеките имена покемонов из ответа и выведите их списком\n","\n","3. Введите с помощью input() название одного из покемонов\n","\n","\n","```\n","Имя покемона: clefairy\n","```\n","\n","\n","\n","4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне\n","\n","5. Извлеките и выведите следующие данные о введенном покемоне:\n","\n","     • Имя\n","\n","     • Тип\n","\n","     • Вес\n","\n","     • Рост\n","\n","     • Способности\n","\n","Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию."],"metadata":{"id":"oZ1guEbl0PZm"}},{"cell_type":"code","source":["import requests\n","\n","url = \"https://pokeapi.co/api/v2/pokemon?limit=20\"\n","response = requests.get(url)\n","if response.status_code == 200:\n","    data = response.json()\n","\n","    pokemon_names = [pokemon['name'] for pokemon in data['results']]\n","    print(\"Список первых 20 покемонов:\")\n","    for name in pokemon_names:\n","        print(name)\n","else:\n","    print(\"Не удалось получить список покемонов\")\n","    exit()\n","\n","\n","selected_pokemon = input(\"\\nВведите название одного из покемонов из списка: \").strip().lower()\n","url = f\"https://pokeapi.co/api/v2/pokemon/{selected_pokemon}\"\n","response = requests.get(url)\n","\n","\n","if response.status_code == 200:\n","    pokemon_data = response.json()\n","    name = pokemon_data['name']\n","    types = [t['type']['name'] for t in pokemon_data['types']]\n","    weight = pokemon_data['weight']\n","    height = pokemon_data['height']\n","    abilities = [ability['ability']['name'] for ability in pokemon_data['abilities']]\n","\n","    print(f\"\\nИмя: {name}\")\n","    print(f\"Тип: {', '.join(types)}\")\n","    print(f\"Вес: {weight / 10} кг\")\n","    print(f\"Рост: {height / 10} м\")\n","    print(f\"Способности: {', '.join(abilities)}\")\n","else:\n","    print(\"Не удалось получить информацию о выбранном покемоне\")\n"],"metadata":{"id":"JkFmivjp25NL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 3. HTTP-запросы, ответы и посты\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:\n","\n","1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON\n","\n","2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON\n","\n","3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль"],"metadata":{"id":"h194KTer1-B3"}},{"cell_type":"code","source":["import requests\n","\n","url_all_posts = \"https://jsonplaceholder.typicode.com/posts\"\n","response_all_posts = requests.get(url_all_posts)\n","\n","if response_all_posts.status_code == 200:\n","    posts = response_all_posts.json()\n","    print(f\"Получено {len(posts)} постов.\")\n","else:\n","    print(\"Не удалось получить список постов.\")\n","    posts = []\n","post_id = input(\"Введите ID поста для получения подробной информации: \")\n","url_post_by_id = f\"https://jsonplaceholder.typicode.com/posts/{post_id}\"\n","response_post_by_id = requests.get(url_post_by_id)\n","if response_post_by_id.status_code == 200:\n","    post_data = response_post_by_id.json()\n","else:\n","    print(f\"Не удалось получить пост с ID {post_id}.\")\n","    post_data = {}\n","\n","if post_data:\n","    print(\"\\nИнформация о посте:\")\n","    print(f\"ID: {post_data.get('id')}\")\n","    print(f\"User ID: {post_data.get('userId')}\")\n","    print(f\"Title: {post_data.get('title')}\")\n","    print(f\"Body: {post_data.get('body')}\")\n","else:\n","    print(\"Данные поста отсутствуют.\")\n"],"metadata":{"id":"YANQx4o258Zn","colab":{"base_uri":"https://localhost:8080/","height":405},"executionInfo":{"status":"error","timestamp":1730180106874,"user_tz":-300,"elapsed":14649,"user":{"displayName":"Самоуел Емил","userId":"05889526955764185974"}},"outputId":"c2daddda-c66e-4bf7-8bed-49f9a5cac1ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Получено 100 постов.\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-e5c96435ac17>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Не удалось получить список постов.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0mposts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mpost_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Введите ID поста для получения подробной информации: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0murl_post_by_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34mf\"https://jsonplaceholder.typicode.com/posts/{post_id}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mresponse_post_by_id\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrequests\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl_post_by_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"markdown","source":["## Задание 4. HTTP-запросы, ответы и работа с постами\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:\n","\n","1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON\n","\n","\n","```\n","Заголовок: Новый пост\n","Содержимое поста: Тут должно находиться содержимое нового поста...\n","ID пользователя: 10\n","```\n","\n","\n","\n","2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON\n","\n","3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа"],"metadata":{"id":"4MjiaxDM58ta"}},{"cell_type":"code","source":[],"metadata":{"id":"jZUIdwq96DNl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 5. HTTP-запросы, ответы и пёсики\n","\n","Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.\n","\n","Этапы:\n","\n","1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка\n","\n","2. Реализуйте возможность ввода нескольких пород собак через запятую\n","\n","\n","```\n","african, chow, dingo\n","```\n","\n","\n","\n","3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого\n","\n","\n","Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.\n"],"metadata":{"id":"y0EyPsFQ6mSZ"}},{"cell_type":"code","source":["import requests\n","from IPython.display import Image, display\n","\n","url = \"https://dog.ceo/api/breeds/list/all\"\n","response = requests.get(url)\n","\n","if response.status_code == 200:\n","    breeds = response.json()['message']\n","    breed_list = [f\"{index + 1}. {breed}\" for index, breed in enumerate(breeds.keys())]\n","    print(\"Список всех пород собак:\")\n","    print(\"\\n\".join(breed_list))\n","else:\n","    print(\"Не удалось получить список пород собак.\")\n","    breeds = {}\n","\n","user_input = input(\"Введите названия пород через запятую (african, chow, dingo): \")\n","selected_breeds = [breed.strip().lower() for breed in user_input.split(\",\")]\n","\n","\n","images = {}\n","for breed in selected_breeds:\n","    url = f\"https://dog.ceo/api/breed/{breed}/images/random\"\n","    response = requests.get(url)\n","\n","    if response.status_code == 200:\n","        images[breed] = response.json()['message']\n","    else:\n","        images[breed] = \"Не удалось получить изображение для этой породы.\"\n","\n","print(\"\\nИзображения выбранных пород:\")\n","for breed, image_url in images.items():\n","    print(f\"{breed.capitalize()}: {image_url}\")\n","    if \"http\" in image_url:\n","        display(Image(url=image_url))\n"],"metadata":{"id":"CVJx0B9E8au1","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1733327054202,"user_tz":-300,"elapsed":12096,"user":{"displayName":"Самоуел Емил","userId":"05889526955764185974"}},"outputId":"4e8ada7b-f2b0-4dad-dfc0-b22725173c9a"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Список всех пород собак:\n","1. affenpinscher\n","2. african\n","3. airedale\n","4. akita\n","5. appenzeller\n","6. australian\n","7. bakharwal\n","8. basenji\n","9. beagle\n","10. bluetick\n","11. borzoi\n","12. bouvier\n","13. boxer\n","14. brabancon\n","15. briard\n","16. buhund\n","17. bulldog\n","18. bullterrier\n","19. cattledog\n","20. cavapoo\n","21. chihuahua\n","22. chippiparai\n","23. chow\n","24. clumber\n","25. cockapoo\n","26. collie\n","27. coonhound\n","28. corgi\n","29. cotondetulear\n","30. dachshund\n","31. dalmatian\n","32. dane\n","33. danish\n","34. deerhound\n","35. dhole\n","36. dingo\n","37. doberman\n","38. elkhound\n","39. entlebucher\n","40. eskimo\n","41. finnish\n","42. frise\n","43. gaddi\n","44. germanshepherd\n","45. greyhound\n","46. groenendael\n","47. havanese\n","48. hound\n","49. husky\n","50. keeshond\n","51. kelpie\n","52. kombai\n","53. komondor\n","54. kuvasz\n","55. labradoodle\n","56. labrador\n","57. leonberg\n","58. lhasa\n","59. malamute\n","60. malinois\n","61. maltese\n","62. mastiff\n","63. mexicanhairless\n","64. mix\n","65. mountain\n","66. mudhol\n","67. newfoundland\n","68. otterhound\n","69. ovcharka\n","70. papillon\n","71. pariah\n","72. pekinese\n","73. pembroke\n","74. pinscher\n","75. pitbull\n","76. pointer\n","77. pomeranian\n","78. poodle\n","79. pug\n","80. puggle\n","81. pyrenees\n","82. rajapalayam\n","83. redbone\n","84. retriever\n","85. ridgeback\n","86. rottweiler\n","87. saluki\n","88. samoyed\n","89. schipperke\n","90. schnauzer\n","91. segugio\n","92. setter\n","93. sharpei\n","94. sheepdog\n","95. shiba\n","96. shihtzu\n","97. spaniel\n","98. spitz\n","99. springer\n","100. stbernard\n","101. terrier\n","102. tervuren\n","103. vizsla\n","104. waterdog\n","105. weimaraner\n","106. whippet\n","107. wolfhound\n","Введите названия пород через запятую (african, chow, dingo): stbernard\n","\n","Изображения выбранных пород:\n","Stbernard: https://images.dog.ceo/breeds/stbernard/n02109525_12736.jpg\n"]},{"output_type":"display_data","data":{"text/html":["<img src=\"https://images.dog.ceo/breeds/stbernard/n02109525_12736.jpg\"/>"],"text/plain":["<IPython.core.display.Image object>"]},"metadata":{}}]}]}